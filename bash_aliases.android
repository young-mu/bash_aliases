# Android releated aliases

# directory switch
alias K='cd ~/AOSP/Kitkat; source build/envsetup.sh 1> /dev/null'
alias kp='cd ~/AOSP/Kitkat/out/target/product'
alias L='cd ~/AOSP/Lollipop; source build/envsetup.sh 1> /dev/null'
alias lp='cd ~/AOSP/Lollipop/out/target/product'
alias bio='cd ~/AOSP/Lollipop/bionic'

# internal tools
alias d='adb shell'
alias dev='adb devices'
alias dp='adb shell input keyevent KEYCODE_POWER'
alias nb='ndk-build'
alias adb-restart='adb kill-server; adb start-server'
alias bio_syscall_32='cat ~/Android/android-ndk-r10e/platforms/android-21/arch-arm/usr/include/asm/unistd.h'
alias bio_syscall_64='cat ~/Android/android-ndk-r10e/platforms/android-21/arch-arm64/usr/include/asm-generic/unistd.h'

# external tools
alias dex2jar='~/Tools/dex2jar/d2j-dex2jar.sh'
alias jd-gui='~/Tools/jd-gui/jd-gui'
alias studio='~/Android/android-studio/bin/studio.sh'
alias arm-gcc='arm-linux-androideabi-gcc --sysroot=/home/young/Android/android-ndk-r10e/platforms/android-21/arch-arm'
alias arm64-gcc='aarch64-linux-android-gcc --sysroot=/home/young/Android/android-ndk-r10e/platforms/android-21/arch-arm64'

# get AndroidManifest from apk into current directory
# NOTE : apktool need to be installed
getAM() {
    if [[ ! "$1" =~ .apk$ ]]; then
        echo "Usage : getAM <apk>"
    elif [[ "$1" =~ .apk$ ]]; then
        mkdir -p /tmp/tmpapk
        cp $1 /tmp/tmpapk/
        pushd /tmp/tmpapk &> /dev/null
        apktool d $1 &> /dev/null
        popd &> /dev/null
        name=${1%%\.apk}
        cp /tmp/tmpapk/$name/AndroidManifest.xml ./
        if [[ $? -eq 0 ]]; then
            echo "get AndroidManifest.xml ..."
        fi
        rm -rf /tmp/tmpapk
    fi
}

# android screencap
sc() {
    if [[ `adb devices | grep -w device` ]]; then
        adb shell screencap -p | sed 's/\r$//' > screen.png
        echo "./screen.png is generated"
    else
        echo "no device connected."
    fi
}

# show Android make -j number
makej() {
    if [[ $# -eq 0 ]]; then
        nCore=`cat /proc/cpuinfo | grep processor | wc -l`
        isHT=`cat /proc/cpuinfo | grep flags | uniq | grep ht | wc -l`
        echo "2 * ${nCore} * (${isHT} + 1)" | bc
    elif [[ $# -eq 1 && $1 == "-v" ]]; then
        nCore=`cat /proc/cpuinfo | grep processor | wc -l`
        echo "cores : ${nCore}"
        isHT=`cat /proc/cpuinfo | grep flags | uniq | grep ht | wc -l`
        nThread=`echo "${nCore} * (${isHT} + 1)" | bc`
        echo "threads : $nThread"
    else
        echo "Usage : makej (-v)"
    fi
}

# convert one image to multiple-dpi icons
# NOTE :
# 1. imagemagick need to be installed
# 2. execute in the root directory of project
genIcons() {
    if [[ ! -e ./AndroidManifest.xml ]]; then
        echo "NO Android project here."
    else
        if [[ $# -ne 1 ]]; then
            echo "Usage : genIcons <image file>"
        else
            img=$1
            icondirs=`ls -d ./res/drawable-*`
            for icondir in ${icondirs}; do
                dirname=`basename ${icondir} | cut -d"-" -f2`
                case "${dirname}" in
                    ldpi)
                        convert -resize 36x36 ${img} ${icondir}/ic_launcher.png
                        echo "generate res/drawable-ldpi/ic_launcher.png";;
                    mdpi)
                        convert -resize 48x48 ${img} ${icondir}/ic_launcher.png
                        echo "generate res/drawable-mdpi/ic_launcher.png";;
                    hdpi)
                        convert -resize 72x72 ${img} ${icondir}/ic_launcher.png
                        echo "generate res/drawable-hdpi/ic_launcher.png";;
                    xhdpi)
                        convert -resize 96x96 ${img} ${icondir}/ic_launcher.png
                        echo "generate res/drawable-xhdpi/ic_launcher.png";;
                    xxhdpi)
                        convert -resize 144x144 ${img} ${icondir}/ic_launcher.png
                        echo "generate res/drawable-xxhdpi/ic_launcher.png";;
                    *)
                        echo "unknown directory : ${icondir}"
                esac
            done
        fi
    fi
}

# get pakcage info
apk() {
    if [ $# -ne 1 -a $# -ne 2 ]; then
        echo "Usage: apk [n|v|p] <apk>"
    else
        if [ $# -eq 1 ]; then
            aapt d badging $1
        elif [ $# -eq 2 ]; then
            case "$1" in
                # package name
                n) aapt d badging $2 | grep package | awk -F\' '{print $2}';;
                # app version
                v) aapt d badging $2 | grep package | awk -F\' '{print $6}';;
                # permission
                p) aapt d badging $2 | grep uses-permission | awk -F\' '{print $2}';;
                *) echo "unsupported option: $1";;
            esac
        fi
    fi
}

# clear apk (force-stop and clear data and cache)
# NOTE: the status "success" is result of "pm clear"
cls() {
    if [[ $# -ne 1 ]]; then
        echo "Usage: cls <apk>"
    else
        apk=$1
        package=`aapt d badging ${apk} | grep package | awk -F\' '{print $2}'`
        adb shell am force-stop ${package}
        adb shell pm clear ${package}
    fi
}

# gdbserver attach (device)
gdbserver() {
    if [[ $# -eq 0 ]]; then
        echo "Usage: gdbserver [j] <apk>"
    elif [[ $# -eq 1 ]]; then
        apk=$1
        action="android.intent.action.MAIN"
        package=`aapt d badging ${apk} | grep package | awk -F\' '{print $2}'`
        activity=`aapt d badging ${apk} | grep launchable-activity | awk -F\' '{print $2}'`
        adb shell am start -a ${action} -n ${package}/${activity}
        # try to catch app
        pid=`adb shell ps | grep ${package} | awk '{print $2}'`
        while [[ ${pid} == "" ]]; do
            echo "No app catched, try again ..."
            pid=`adb shell ps | grep ${package} | awk '{print $2}'`
        done
        echo "Now try to attach to PID $pid ..."
        adb shell gdbserver :1234 --attach ${pid}
    elif [[ $# -eq 2 && $1 == 'j' ]]; then
        apk=$2
        package=`aapt d badging ${apk} | grep package | awk -F\' '{print $2}'`
        pid=`adb shell ps | grep ${package} | awk '{print $2}'`
        adb shell gdbserver :1234 --attach ${pid} &
        adb forward tcp:8001 jdwp:${pid}
        jdb -attach localhost:8001
    fi
}

# generate gdb configuration file (host)
gengdb() {
    gdbfile="gdb.setup"
    curpath=`pwd`
    echo "shell adb forward tcp:2000 tcp:1234" > ${gdbfile}
    echo "set solib-search-path .:symbols/system/bin:symbols/system/lib" >> ${gdbfile}
    echo "set height 0" >> ${gdbfile}
    echo "file ./symbols/system/bin/app_process32" >> ${gdbfile}
    echo "target remote :2000" >> ${gdbfile}
    echo "./${gdbfile} is generated."
}

# repo sync
reposync() {
    repo sync -j5
    while [[ $? -eq 1 ]]; do
        sleep 3
        repo sync -j5
    done
}

# get package to be imported by querying android.jar
# NOTE: Android SDK must be placed in directory of ANDROID_SDK
impkg() {
    if [[ $# -ne 2 ]]; then
        echo "Usage: impkg <version> <keyword>"
    else
        version=$1
        keyword=$2
        jarPath=${ANDROID_SDK}/platforms/android-${version}
        jar tf ${jarPath}/android.jar | grep ".*\.class" | grep "${keyword}"
    fi
}

# fastboot all images and reboot
fbimg() {
    adb reboot-bootloader
    echo "wait for 5 seconds to enter fastboot mode ..."
    sleep 5
    echo "start to flash ..."
    fastboot -w
    fastboot flash boot boot.img
    fastboot flash cache cache.img
    fastboot flash recovery recovery.img
    fastboot flash system system.img
    fastboot flash userdata userdata.img
    fastboot reboot
}

# make one simple android project
mproj() {
    if [[ $# -ne 1 ]]; then
        echo "Usage: mproj <name>"
    else
        name=$1
        mkdir ${name}
        tar xzvf ~/.proj.tar.gz -C ./${name} --strip 1 1> /dev/null
        mv ./${name}/src/com/young/xxx ./${name}/src/com/young/${name}
        xxxFiles=`grep -r "xxx" ./${name} | awk -F: '{print $1}' | sort | uniq`
        sed -i "s/xxx/${name}/g" ${xxxFiles}
    fi
}

# adb strace
adb_strace() {
    zygotePID=`adb shell ps | grep zygote | awk '{print $2}'`
    adb shell strace -i -f -p ${zygotePID}
}

# download apk file from google play
dlapk() {
    if [ $# -ne 1 ]; then
        echo "Usage: dlapk <apk-url-in-googleplay>"
    else
        id=`echo $1 | awk -F'=' '{print $2}'`
        dlurl="http://dl3.apk-dl.com/store/download/details?id=$id"
        dlapk="$id.apk"
        wget $dlurl -O $dlapk
    fi
}

# list thread name and status of one APP
lt() {
    if [ $# -ne 1 ]; then
        echo "Usage: lt <pid>"
    else
        pid=$1
        threads=(`adb shell ls /proc/$pid/task`)
        numThread=${#threads[@]}
        echo "thread number:" $numThread
        for ((i = 0; i < numThread; i++)); do
            _tid=${threads[$i]}
            tid=`echo $_tid | sed 's/\r$//'` # remove trailing newline char
            thrStat=`adb shell cat /proc/$tid/stat`
            thrName=`echo $thrStat | awk '{print $2}'`
            thrStatus=`echo $thrStat | awk '{print $3}'`
            thrNo=`expr $i + 1`
            echo "$thrNo [$tid] $thrName $thrStatus"
        done
    fi
}

# view process maps
maps() {
    if [ $# -ne 1 ]; then
        echo "Usage: maps <pid>"
    else
        pid=$1
        adb shell cat /proc/${pid}/maps | vim -
    fi
}
