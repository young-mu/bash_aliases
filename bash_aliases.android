# Android releated aliases
alias d='adb shell'
alias L='cd ~/AOSP/Lollipop; source build/envsetup.sh 1> /dev/null'
alias flo='cd ~/AOSP/Lollipop/out/target/product/flo;'
alias nb='ndk-build'
alias apk='aapt d badging'
alias dex2jar='~/Tools/dex2jar/dex2jar-0.0.9.15/d2j-dex2jar.sh'
alias jd-gui='~/Tools/jd-gui/jd-gui'
alias dp='adb shell input keyevent KEYCODE_POWER'

# get AndroidManifest from apk into current directory
# NOTE : apktool need to be installed
getAM() {
    if [[ ! "$1" =~ .apk$ ]]; then
        echo "Usage : getAM <apk>"
    elif [[ "$1" =~ .apk$ ]]; then
        apktool d $1 /tmp/tmpapk &> /dev/null
        cp /tmp/tmpapk/AndroidManifest.xml ./
        if [[ $? -eq 0 ]]; then
            echo "get AndroidManifest.xml ..."
        fi
        rm -rf /tmp/tmpapk
        rm -rf ~/apktool
    fi
}

# android screencap
sc() {
    if [[ $# -eq 0 ]]; then
        adb shell screencap -p | sed 's/\r$//' > screen.png
        echo "./screen.png is generated"
    elif [[ $# -eq 1 ]]; then
        adb shell screencap -p | sed 's/\r$//' > ${1}.png
        echo "./${1}.png is generated"
    fi
}

# show Android make -j number
makej() {
    if [[ $# -eq 0 ]]; then
        nCore=`cat /proc/cpuinfo | grep processor | wc -l`
        isHT=`cat /proc/cpuinfo | grep flags | uniq | grep ht | wc -l`
        echo "2 * ${nCore} * (${isHT} + 1)" | bc
    elif [[ $# -eq 1 && $1 == "-v" ]]; then
        nCore=`cat /proc/cpuinfo | grep processor | wc -l`
        echo "cores : ${nCore}"
        isHT=`cat /proc/cpuinfo | grep flags | uniq | grep ht | wc -l`
        nThread=`echo "${nCore} * (${isHT} + 1)" | bc`
        echo "threads : $nThread"
    else
        echo "Usage : makej (-v)"
    fi
}

# convert one image to multiple-dpi icons
# NOTE : imagemagick need to be installed
genIcons() {
    if [[ ! -e ./AndroidManifest.xml ]]; then
        echo "NO Android project here."
    else
        if [[ $# -ne 1 ]]; then
            echo "Usage : genIcons <image file>"
        else
            img=$1
            icondirs=`ls -d ./res/drawable-*`
            for icondir in ${icondirs}; do
                dirname=`basename ${icondir} | cut -d"-" -f2`
                case "${dirname}" in
                    ldpi)
                        convert -resize 36x36 ${img} ${icondir}/ic_launcher.png
                        echo "generate res/drawable-ldpi/ic_launcher.png";;
                    mdpi)
                        convert -resize 48x48 ${img} ${icondir}/ic_launcher.png
                        echo "generate res/drawable-mdpi/ic_launcher.png";;
                    hdpi)
                        convert -resize 72x72 ${img} ${icondir}/ic_launcher.png
                        echo "generate res/drawable-hdpi/ic_launcher.png";;
                    xhdpi)
                        convert -resize 96x96 ${img} ${icondir}/ic_launcher.png
                        echo "generate res/drawable-xhdpi/ic_launcher.png";;
                    xxhdpi)
                        convert -resize 144x144 ${img} ${icondir}/ic_launcher.png
                        echo "generate res/drawable-xxhdpi/ic_launcher.png";;
                    *)
                        echo "unknown directory : ${icondir}"
                esac
            done
        fi
    fi
}

# get package name of apk
pkg() {
    if [[ $# -ne 1 ]]; then
        echo "Usage: pkg <apk>"
    else apk=$1
        package=`aapt d badging ${apk} | grep package | awk -F\' '{print $2}'`
        echo $package
    fi
}

# clear apk (force-stop and clear data and cache)
# NOTE: the status "success" is result of "pm clear"
cls() {
    if [[ $# -ne 1 ]]; then
        echo "Usage: cls <apk>"
    else
        apk=$1
        package=`aapt d badging ${apk} | grep package | awk -F\' '{print $2}'`
        adb shell am force-stop ${package}
        adb shell pm clear ${package}
    fi
}

# gdbserver attach (device)
# NOTE: /data/gdbserver needs to be installed in advance
gdbserver() {
    if [[ $# -ne 1 ]]; then
        echo "Usage: gdbserver <apk>"
    else
        apk=$1
        action="android.intent.action.MAIN"
        package=`aapt d badging ${apk} | grep package | awk -F\' '{print $2}'`
        activity=`aapt d badging ${apk} | grep launchable-activity | awk -F\' '{print $2}'`
        adb shell am start -a ${action} -n ${package}/${activity}
        # try to catch app
        pid=`adb shell ps | grep ${package} | awk '{print $2}'`
        while [[ ${pid} == "" ]]; do
            echo "No app catched, try again ..."
            pid=`adb shell ps | grep ${package} | awk '{print $2}'`
        done
        echo "Now try to attach to PID $pid ..."
        adb shell /data/gdbserver :1234 --attach ${pid}
    fi
}

# generate gdb configuration file (host)
gengdb() {
    gdbfile="conf.gdb"
    curpath=`pwd`
    echo "file lib/app_process" > ${gdbfile}
    echo "set solib-search-path ${curpath}/lib" >> ${gdbfile}
    echo "shell adb forward tcp:2000 tcp:1234" >> ${gdbfile}
    echo "target remote :2000" >> ${gdbfile}
    echo "./${gdbfile} is generated."
}
